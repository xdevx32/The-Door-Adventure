//
//  Awesome.swift
//  The Door Adventure
//
//  Created by Angel Kukushev on 5/27/16.
//  Copyright ¬© 2016 Angel Kukushev. All rights reserved.
//

import SpriteKit

let defaults = NSUserDefaults.standardUserDefaults()

var continueButton: SKNode! = nil

var optionOneButton: SKNode! = nil

var optionTwoButton: SKNode! = nil

var downButtonMargin: CGFloat  = 80.0

class Awesome: SKScene {
    
    var continueTextLabel: SKLabelNode! = nil
    
    var optionOneTextLabel: SKLabelNode! = nil
    
    var optionTwoTextLabel: SKLabelNode! = nil
    
    var labelArray: [SKLabelNode] = [SKLabelNode]()
    
    var linesArray: [String] = [String]()
    
    var textForButtons: [String] = [String]()

    func delay(delay:Double, closure:()->()) {
        dispatch_after(
            dispatch_time(
                DISPATCH_TIME_NOW,
                Int64(delay * Double(NSEC_PER_SEC))
            ),
            dispatch_get_main_queue(), closure)
    }
    
    override func touchesEnded(touches: Set<UITouch>, withEvent event: UIEvent?) {
        // Loop over all the touches in this event
        for touch: AnyObject in touches {
            // Get the location of the touch in this scene
            let location = touch.locationInNode(self)
            // Check if the location of the touch is within the button's bounds
            if continueButton.containsPoint(location) {
                
            
        
                //self.removeAllChildren()
                
                
                let playScene = Awesome(size: self.size, text: linesArray, answers: textForButtons, points: 0)
                playScene.scaleMode = .AspectFill
                self.view?.presentScene(playScene, transition: fadeColorEffect)
                
                defaults.setBool(false, forKey: "toContinue")
                 // boom
                
               
            }
        }
    }
    
    init(size: CGSize,text:[String] ,answers:[String], points: Int) {
        
        
        
        super.init(size: size)
       
        let scenariosCount = defaults.integerForKey("miniScenarios")
        
        print(scenariosCount)
        // Every line can have 33 letters
  
        
        
        
        
        
        
        
        
        if scenariosCount == 1 {
            
            linesArray = ["–ë–µ—à–µ 9 —á–∞—Å–∞ –≤ —Å—ä–±–æ—Ç–∞ –∏ –¥—ä–∂–¥—ä—Ç –Ω–µ ",
                          "—Å–ø–∏—Ä–∞—à–µ –¥–∞ –≤–∞–ª–∏. –¢–∏ —Å–µ —Å—ä–±—É–¥–∏ –æ—Ç",
                          "—á—É–∫–∞–Ω–µ –Ω–∞ –≤—Ä–∞—Ç–∞—Ç–∞. –°—Ç—Ä–∞–Ω–Ω–æ, –Ω–µ",
                          "–æ—á–∞–∫–≤–∞—à–µ –Ω–∏–∫–æ–≥–æ. ",
                          "",
                          "",
                          "",
                          ""]
            
            textForButtons = ["","–ü—Ä–æ–¥—ä–ª–∂–∏","–û—Ç–≤–æ—Ä–∏"]
            
        } else if scenariosCount == 2 {
            linesArray = ["–¢–∏ –æ—Ç–≤–æ—Ä–∏ –≤—Ä–∞—Ç–∞ –∏ –ø—Ä–µ–¥ —Ç–µ–± —Å—Ç–æ–µ—à–µ",
                          "–Ω–∞–ø—ä–ª–Ω–æ –Ω–µ–ø–æ–∑–Ω–∞—Ç —á–æ–≤–µ–∫. –ù—è–º–∞—à–µ ",
                          "—á–∞–¥—ä—Ä, –Ω–∞–±–ª–∏–∑–æ –Ω—è–º–∞—à–µ –∏ —Å–ø—Ä—è–Ω–∞ ",
                          "–∫–æ–ª–∞, –∞ —Ç–æ–π –Ω–µ –±–µ—à–µ –º–æ–∫—ä—Ä. ",
                          "–ù–µ–ø–æ–∑–Ω–∞—Ç–∏—è—Ç —Å–µ —É—Å–º–∏—Ö–Ω–∞ –∏ –∫–∞–∑–∞:",
                          "`–ó–¥—Ä–∞–≤–µ–π, <–Ω–∏–∫–Ω–µ–π–º> !!` ",
                          "–û—Ç –∫—ä–¥–µ –ª–∏ –∑–Ω–∞–µ—à–µ —Ç–æ–π –∏–º–µ—Ç–æ —Ç–∏ ?",
                          "",
                          ""]
            
            textForButtons = ["","–ó–∞—Ç–≤–æ—Ä–∏ –≤—Ä–∞—Ç–∞—Ç–∞","–ü–æ–∑–¥—Ä–∞–≤–∏ –≥–æ"]
            
        } else if scenariosCount == 3 {
            linesArray = ["–ù–µ–ø–æ–∑–Ω–∞—Ç–∏—è—Ç –º–∏–Ω–∞ –ø–æ–∫—Ä–∞–π —Ç–µ–±,",
                          "–≤–ª–µ–∑–µ –∏ —Å–µ–¥–Ω–∞ –Ω–∞ –¥–∏–≤–∞–Ω–∞ –∞–±—Å–æ–ª—é—Ç–Ω–æ",
                          "–Ω–µ–ø–æ–∫–∞–Ω–µ–Ω. `–ù—è–º–∞—à–µ –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ`",
                          " –∫–∞–∑–∞ —Ç–æ–π –∏ –∏–∑–≤–∞–¥–∏ –ø–æ–¥—Ä–æ–±–Ω–∞ ",
                          "–∫–∞—Ä—Ç–∞ –Ω–∞ –≥—Ä–∞–¥–∞.–û–≥—Ä–∞–¥–∏ —Ç—Ä–∏ –º–µ—Å—Ç–∞ ",
                          "—Å —Ö–∏–º–∏–∫–∞–ª –∏ –∫–∞–∑–∞: –°–ª–µ–¥ 30 –º–∏–Ω—É—Ç–∏",
                          " —Ç—Ä—è–±–≤–∞ –¥–∞ —Å–∏ –Ω–∞ –µ–¥–Ω–æ –æ—Ç —Ç–µ–∑–∏",
                          " –º–µ—Å—Ç–∞. –ò–∑–±–µ—Ä–∏ –º—ä–¥—Ä–æ !",
                          ""]
            
            textForButtons = ["","","–ü—Ä–æ–¥—ä–ª–∂–∏"]
            
        }else if scenariosCount == 4 {
            linesArray = ["–ù–µ–ø–æ–∑–Ω–∞—Ç–∏—è—Ç –æ—Å—Ç–∞–≤–∏ –∫–∞—Ä—Ç–∞—Ç–∞ –Ω–∞ ",
                          "–º–∞—Å–∞—Ç–∞ –∏ –∏–∑–ª–µ–∑–µ —Å—ä—â–æ —Å—ä—â–æ ",
                          "—Ç–æ–ª–∫–æ–≤–∞ –Ω–µ–æ—á–∞–∫–≤–∞–Ω–æ, –∫–æ–ª–∫–æ—Ç–æ ",
                          "–±–µ—à–µ –≤–ª—è–∑—ä–ª. –¢–∏ –Ω—è–º–∞—à–µ –Ω–∏—â–æ ",
                          "–ø–æ-–¥–æ–±—Ä–æ –∑–∞ –ø—Ä–∞–≤–µ–Ω–µ –¥–Ω–µ—Å, –∑–∞—Ç–æ–≤–∞",
                          "–Ω–µ —Å–µ –∑–∞–º–∏—Å–ª–∏ –º–Ω–æ–≥–æ –∏ –∏–∑–±—Ä–∞ ",
                          "–µ–¥–Ω–æ –æ—Ç –º–µ—Å—Ç–∞—Ç–∞.–ê —Ç–µ –±—è—Ö–∞: ",
                          "—Ä–µ—Å—Ç–æ—Ä–∞–Ω—Ç,–º–∞–≥–∞–∑–∏–Ω –∑–∞ –∏–≥—Ä–∞—á–∫–∏ –∏ ",
                          "–ø–∞—Ä–∫. –ò —Ç—Ä–∏—Ç–µ —Å–µ –Ω–∞–º–∏—Ä–∞—Ö–∞ –Ω–∞–±–ª–∏–∑–æ,",
                          "–Ω–æ –Ω–∏–∫–æ–≥–∞ –Ω–µ –±–µ—à–µ –∏–¥–≤–∞–ª –∑–∞ —Ç—è—Ö."
                           ]
            
            textForButtons = ["–ú–∞–≥–∞–∑–∏–Ω","–ü–∞—Ä–∫","–†–µ—Å—Ç–æ—Ä–∞–Ω—Ç"]
            
        }else if scenariosCount == 5 {
            linesArray = ["–ù–µ–ø–æ–∑–Ω–∞—Ç–∏—è—Ç –æ—Å—Ç–∞–≤–∏ –∫–∞—Ä—Ç–∞—Ç–∞ –Ω–∞ –º–∞—Å–∞—Ç–∞",
                          "–∏ –∏–∑–ª–µ–∑–µ —Å—ä—â–æ —Å—ä—â–æ —Ç–æ–ª–∫–æ–≤–∞ –Ω–µ–æ—á–∞–∫–≤–∞–Ω–æ,",
                          "",
                          "–æ—á–∞–∫–≤–∞—à–µ –Ω–∏–∫–æ–≥–æ. ",
                          "",
                          "",
                          "",
                          "",
                          ""]
            
            textForButtons = ["","–û—Ç–≤–æ—Ä–∏","–ü—Ä–æ–¥—ä–ª–∂–∏"]
            
        }else if scenariosCount == 6 {
            linesArray = ["–ë–µ—à–µ 9 —á–∞—Å–∞ –≤ —Å—ä–±–æ—Ç–∞ –∏ –¥—ä–∂–¥—ä—Ç –Ω–µ ",
                          "—Å–ø–∏—Ä–∞—à–µ –¥–∞ –≤–∞–ª–∏. –¢–∏ —Å–µ —Å—ä–±—É–¥–∏ –æ—Ç",
                          "—á—É–∫–∞–Ω–µ –Ω–∞ –≤—Ä–∞—Ç–∞—Ç–∞. –°—Ç—Ä–∞–Ω–Ω–æ, –Ω–µ",
                          "–æ—á–∞–∫–≤–∞—à–µ –Ω–∏–∫–æ–≥–æ. ",
                          "",
                          "",
                          "",
                          "",
                          ""]
            
            textForButtons = ["","–û—Ç–≤–æ—Ä–∏","–ü—Ä–æ–¥—ä–ª–∂–∏"]
            
        }else if scenariosCount == 7 {
            linesArray = ["–ë–µ—à–µ 9 —á–∞—Å–∞ –≤ —Å—ä–±–æ—Ç–∞ –∏ –¥—ä–∂–¥—ä—Ç –Ω–µ ",
                          "—Å–ø–∏—Ä–∞—à–µ –¥–∞ –≤–∞–ª–∏. –¢–∏ —Å–µ —Å—ä–±—É–¥–∏ –æ—Ç",
                          "—á—É–∫–∞–Ω–µ –Ω–∞ –≤—Ä–∞—Ç–∞—Ç–∞. –°—Ç—Ä–∞–Ω–Ω–æ, –Ω–µ",
                          "–æ—á–∞–∫–≤–∞—à–µ –Ω–∏–∫–æ–≥–æ. ",
                          "",
                          "",
                          "",
                          "",
                          ""]
            
            textForButtons = ["","–û—Ç–≤–æ—Ä–∏","–ü—Ä–æ–¥—ä–ª–∂–∏"]
            
        }
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        defaults.setInteger(scenariosCount + 1, forKey: "miniScenarios")
        
        backgroundColor = SKColor.whiteColor()
        
        var üò±:CGFloat = 30.0
       
        // –ê–ú–ò –¢–£–ö–ê –í–°–ò–ß–ö–û –°–¢–ê–ù–ê –ê–ú–ê –ù–ò–ö–ê–ö–í–ê –ò–î–ï–Ø –ö–ê–ö. –î–ê–ñ–ï –î–ê –°–ò –ö–ê–ñ–ê –ß–ï–°–¢–ù–û –ù–ï –ò–°–ö–ê–ú –î–ê –ó–ù–ê–ú...
        
        //738.0
        
        for i in 0...7 {
            üò± = üò± + 30.0
            
            labelArray.append(SKLabelNode(fontNamed: "AppleSDGothicNeo-UltraLight"))
            labelArray[i].name = "–ò–∑—Ä–µ—á–µ–Ω–∏–µ: " + String(i)
            labelArray[i].position.x = self.frame.midX
            labelArray[i].zPosition = 1
            labelArray[i].position.y = CGRectGetMaxY(self.frame) - üò±
            
            labelArray[i].text = linesArray[i]

            labelArray[i].fontColor = SKColor.blackColor()
            print(labelArray[i])
            addChild(labelArray[i])
        }
        
        // Option One, Stays on top of continueButton
        // BUTTON CODE
        
        
        optionOneButton = SKSpriteNode(imageNamed:"rawButton")
        
        optionOneButton.position = CGPoint(x:CGRectGetMidX(self.frame), y:CGRectGetMinY(self.frame) + downButtonMargin)
        
        
        // END BUTTON CODE
        
        // LABEL CODE
        optionOneTextLabel = SKLabelNode(fontNamed: "AppleSDGothicNeo-UltraLight")
        
        optionOneTextLabel.text = textForButtons[1]

        optionOneTextLabel.fontSize = 25
        
        optionOneTextLabel.fontColor = SKColor.whiteColor()
        
        optionOneTextLabel.position.x = self.frame.midX

        optionOneTextLabel.zPosition = 1
    
        optionOneTextLabel.position.y = optionOneButton.position.y - optionOneButton.frame.size.height/4
        
        optionOneTextLabel.color = UIColor.whiteColor()
        
        // END LABEL CODE
        
        
        // Option Two, stays on top of Option One
        // BUTTON CODE
        
        
        optionTwoButton = SKSpriteNode(imageNamed:"rawButton")
        
        optionTwoButton.position = CGPoint(x:CGRectGetMidX(self.frame), y:CGRectGetMinY(self.frame) + downButtonMargin + 50.0)
        
        
        // END BUTTON CODE
        
        // LABEL CODE
        optionTwoTextLabel = SKLabelNode(fontNamed: "AppleSDGothicNeo-UltraLight")
        
        optionTwoTextLabel.text = textForButtons[0]
        
        optionTwoTextLabel.fontSize = 25
        
        optionTwoTextLabel.fontColor = SKColor.whiteColor()
        
        optionTwoTextLabel.position.x = self.frame.midX
        
        optionTwoTextLabel.zPosition = 1
        
        optionTwoTextLabel.position.y = optionTwoButton.position.y - optionTwoButton.frame.size.height/4
        
        optionTwoTextLabel.color = UIColor.whiteColor()
        
        // END LABEL CODE

        
        
        
        // ADDING CHILDS
    
        if "" != textForButtons[1]{
            addChild(optionOneTextLabel)
            addChild(optionOneButton)
        }
    
        if "" != textForButtons[0]{
            addChild(optionTwoTextLabel)
            addChild(optionTwoButton)
            
        }
 
        // Continue button
        
        continueButton = SKSpriteNode(imageNamed:"rawButton")
        continueButton.position = CGPoint(x:CGRectGetMidX(self.frame), y:CGRectGetMinY(self.frame) + 30)
        
        // LABEL CODE
        continueTextLabel = SKLabelNode(fontNamed: "AppleSDGothicNeo-UltraLight")
        
        continueTextLabel.text = textForButtons[2]
        
        continueTextLabel.fontSize = 25
        
        continueTextLabel.fontColor = SKColor.whiteColor()
        
        continueTextLabel.position.x = self.frame.midX
        
        continueTextLabel.zPosition = 1
        
        continueTextLabel.position.y = continueButton.position.y - continueButton.frame.size.height/4
        
        // END LABEL CODE

        addChild(continueButton)
        addChild(continueTextLabel)

        // end continue button
    }
    
    required init(coder aDecoder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
    override func didMoveToView(view: SKView) {
        
    }
}